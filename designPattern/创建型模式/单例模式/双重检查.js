/**
 * 双重检查
 *  - js 没有线程同步的机制，无法使用
 *  - 例子：
 *      - Singleton类的构造器私有化（js构造器不能私有化）
 *      - instance对象未初始化
 *      - getInstance方法中加入同步处理的代码synchronized，解决线程安全问题
 *      - 如果instance为空，使用同步代码块，如果instance为空创建实例再返回，否则直接返回
 *  - 双重检查概念是多线程开发中常使用到的，进行了两次if(singleton==null)，这样就可以保证线程安全了。
 *  - 实例化代码只用执行一次，后面再次访问时，判断if(singleton==null)，直接return实例化对象，也避免了反复进行方法同步。
 *  - 线程安全、延迟加载、效率高
 *  - 推荐使用这种单例设计模式
 */